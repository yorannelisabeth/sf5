   
   
   
   - server:ca:install
    - require maker --dev
    - require annotations
    - symfony console make:controller  (donner un nom au controller)
    - composer require twig 

    installer la ligne du dessous pour nous permettre de nous connect√© a une base de donn√© souhaiter
    -composer require orm

un fois la modif fait dnas le fichier .env avec tous ce que l'on souhaite faire on lance la commande si dessous (toujours utiliser symfony console ou php/bin console pour les commande concernant les base de donn√©)

    -symfony console doctrine:database:create


-symfony console make:entity

une fois les info entr√©
-php bin/console make:migration
ou
-symfony console make:migration

pour modifi√© la BDD avec les champ cr√© si dessus 2 ecriture possible  soit l'un ou soit l'autre
-php bin/console doctrine:migrations:migrate
-symfony console doctrine:migrations:migrate

cette commande ajoutera √©galement une table migration qu'il ne faut pas supprimer car elle enregistre toute les historiques de migration que l'on aura effectuer au cours du projet

-composer require form validator


recap 10/05/20121
composer require orm // g√©rer la bdd
composer form validator // g√©n√©rer des formulaires


class Entity : repr√©sente une table de la bdd, un objet Entity repr√©sente une enregistrement de la bdd

symfony console make:entity  //
symfony console make:migration // g√©n√©re les requ√™tes SQL qui vont mettre √† jour la bdd selon les entit√©s
symfony console doctrine:migrations:migrate // ex√©cute les migrations

Enregistrer dans une table
	EntityManager : une classe qui permet d'ins√©rer, modifier, supprimer des donn√©es dans une table (requ√™te SQL : INSERT, UPDATE, DELETE)
    Pour enregistrer un nouvel enregistrement :
    	$entityManager->persist($livre)  // les requ√™tes vont √™tre form√©es √† partir d'objet de classe Entity. Les req√ªetes sont mise en attente
        
        $entityManager->flush()  // ex√©cute les requ√™tes en attente et modifie la base de donn√©es
    
Requ√™te SELECT
	les classes Repository permettent d'interroger la bdd. Il y a une classe Repository pour chaque classe Entity
    

classe Request : g√®re la requ√™te HTTP. Un objet de cette classe contient toutes les valeurs des superglobales de PHP

Pour utiliser cette classe (et d'autres comme les Repository, EntityManageer, ...) qu'on ne peut pas instancier, on peut l'instancier en la passant comme 
param√®tre d'une m√©thode d'un controleur

    -symfony console make:form

pour les connexion et creation compte g√©r√© l'autentification

    -composer require security
    
    -symfony console make:user 
    
    //(Abonne) (yes) (pseudo) (yes)
    -symfony console make:entity   
    //(Abonne) (prenom) (string) (30) (yes) (nom) (string)(30)(yes) entr√©
    (cette commande pour ajouter de nouvelle propri√©t√© a Abonne ,on la reselectionner Abonne et rejouter prenom et nom ) 
    )

‚ö† absolument faire les deux commande si dessous si l'on souhaite que la table ce cr√©er en base de donn√© 
    -php bin/console make:migration
    
    -php bin/console doctrine:migrations:migrate

    - symfony console make:auth    
       // (1) (Login) (SecurityController) (yes)
       //toujour faire le make auth avant le registration-form

    - symfony console make:registration-form
    // (yes) ((no) car chiant en local) (yes)


    installer une barre de debug pour les developpeur
        - composer require debug --dev
    
le 12/05/2021 9h30 r√©capitulatif formulaire de connexion et cr√©ation d'utilisateur 

Pour faire du crud :
    -sympfony console make:crud
    //(Abonne) (AbonneController)


symfony console make:entity   Categorie  
// 12h35 le 12/05/2021

symfony console make:entity   Livre     
// 12h37 le 12/05/2021 ici on voulait rajouter un champ donc on utilise la meme commande pour ajouter un champ


pour recup√©rer et installer un projet symfony 
-composer install 

R√©sumer crud  lundi 17/05/2021 9h30

------------------------------------------

correction exercice 10h05 le 17/05/2021 

------------------------------------------------
GESTION DU FRONT
-------------------------------------------
16h30 17/05/2021
Installation de yarn : https://classic.yarnpkg.com/en/docs/install#windows-stable 
dans le dossier du projet dans me powershell
- composer require encore
- yarn install

pour compil√© le css
- yarn add node-sass 
- yarn add sass-loader

pour bootsrap
- yarn add bootstrap // installera la derni√®re version stable
- yarn add jquery // pour bootsrap qui a forcement besoin de jquery
- yarn add popper.js      //sa permet de g√©r√© les pop up

pour les fonts
yarn add @fortawesome/fontawesome-free

decommenter la ligne 59 (.enableSassLoader()) et 72 (.autoProvidejQuery()) dans webpack.config.js pour pouvoir utiliser bootsrap

renommer le fichier app.css en app.scss dans le dossier assets puis ajouter les imports

ne aps oublier de renommer dans app.js 
import './styles/app.css'  en ==> import './styles/app.scss';     en gros le scss

puis dans ce m√™me fichier ajouter ces ligne de code :

const $ = require("jquery");
global.$= global.jQuery = $;
window.Popper = require("popper.js");
require("bootstrap");



et supprimer cette ligne :
// start the Stimulus application
import './bootstrap';

---------------------------------
suite
--------------------------------------------------

deux possibilit√© soit dans un premier temps on retire la version que l'on ne veut pas en faisant
- yarn remove bootstrap 

puis / ou/ on fait direct sans supprimer avant ( derni√®re option a tester üòä )
- yarn add bootstrap@^4.6   // ici on ajoute la version de bootstrap souhaiter

puis
- yarn encore dev


/--------------------09h49 le 18/05/2021------------------------------------/
pour mettre en production 
- yarn encore prod


/--------------a chaque fois que l'on fait une modification css etc on fait cette commande
- yarn encore dev 
/--------------------------ou sinon le faire de fa√ßon automatique grace a 
- voir la commande durant le cours du 18/05/2021 10h              
le terminal sera bloquer donc ouvrir a c√¥t√© un autre terminal 


pour le PROJET
pour ger√© les conect√© on fait
make:user   
make:entity (pour ajouter des champ des propri√©t√© √† la classe Entity\User)
make:auth (authentification) le faire avant de cr√©√©e l'inscription
make:registration-form (inscription)

pour le formulaire pour mettre les champ dans l'ordre que l'on veut regarder le cours a 10h10 le 19/05/2021


symfony console doctrine:database:create
pour crr√© la base de donn√© par default

pour ajouter en local des element nouveau d'une bdd d'une branch distante par exemple
php bin/console doctrine:migrations:migrate


pour annuler une migration : 

symfony server:start -d


losrque l'on r√©cup√®re un projet on fait un -yarn install pour recup√©rer les nodemodules
puis un - composer install

auto indentation au moment de la sauvegarde

ok
pour les windowsien
ctrl ,
√ßa vous ouvre les settings
ensuite vous tapez
format
dedans
ensuite vous cochez la checkbox dans "Editor: Format On Save"
et c'est ok
et vous verrez la magie op√©rer √† chaque fois que vous enregistrerez
votre fichier ;)
